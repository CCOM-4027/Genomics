#!/usr/bin/python
import os, sys, argparse
import laad
import config
from laad import do
import parsingfasta as fileIO

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input')
parser.add_argument('-w', '--insert',action='store_true')
parser.add_argument('-o', '--output', action='store_true')
parser.add_argument('-of', '--outfile')
parser.add_argument('-q', '--query')
parser.add_argument('-u', '--user', default='laadguest')
parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('--init', action='store_true')
parser.add_argument('--config', action='store_true')
parser.add_argument('-d','--description',default="")
parser.add_argument('-a','--alias')
args= parser.parse_args()

translate = lambda(dict): lambda(key): dict[key] if key in dict else key

verbose = True #if args.verbose else False

from settings import aliases, headers
options = {
    'description':
        translate(headers)(args.description),
    'alias':
        translate(aliases[args.alias] if args.alias in aliases else {})
    }

entries = []
if args.input:
    input=args.input
    if not os.path.exists(input): 
        print "Error: File or directory does not exist"
    else:
        def add2entries(file):
            if fileIO.fileType(file):
                if verbose:
                    print "Extracting entries from %s..." % file
                newEntries = fileIO.file2entries(file,options)
                if verbose:
                    print "...%s entries extracted!" % len(newEntries)
                entries.extend(newEntries)

        if os.path.isdir(input):
            if verbose:
                print "Processing files in directory %s..." % input
            for file in os.listdir(input):
                add2entries(file)
        else: 
            add2entries(input)
    if verbose:
        print "%s entries currently in memory" % len(entries)

if args.insert:
    if verbose:
        print "Inserting %s entries to database..." % len(entries)
    laad.addEntries(entries)
    if verbose:
        print "done!"

if args.query:
    from settings import queries
    query = translate(queries)(args.query)
    if verbose:
        print "Sending query:\n%s" % query
    entries = laad.command(query, args.user)
    if verbose:
        print "Query returned",len(entries), "results!"

if args.outfile:
    if fileIO.fileType(args.outfile):
        if verbose:
            print "Creating file %s..." % args.outfile
        fileIO.entries2file(entries,args.outfile,verbose)
        if verbose:
            print "...success!"
    else:
        print "Error: specified invalid file extension for output; file not created"

if args.output:
    print entries
if args.init:
    config.createDatabase(verbose)

if args.config:
    config.menu()
