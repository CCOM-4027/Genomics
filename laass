#!/usr/bin/python
import os, sys, argparse
import laad
import config
from laad import do

from settings import extensions
def knownformat(file):
    return parse.extension(file) in extensions

import parsingfasta as parse
def file2entries(filename):
    return parse.file_to_entries(filename)

def entries2file(entries, filename):
    if knownformat(filename):
        for sequence in sequences:
            print "\t", sequence.id
    else:
        print "Error: specified invalid file extension for output"

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input')
parser.add_argument('-o', '--output', action='store_true')
parser.add_argument('-of', '--outfile')
parser.add_argument('-q', '--query')
parser.add_argument('-u', '--user', default='laadguest')
parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('--init', action='store_true')
parser.add_argument('--config', action='store_true')
args= parser.parse_args()


sequences = []

if args.input:
    if not os.path.exists(args.input): 
        print "File or directory does not exist"
    else:
        def add2sequences(file):
            if knownformat(file):
                print "Converting file", file, "into sequence object"
                sequences.extend(file2entries(file))

        if os.path.isdir(args.input):
            if args.verbose:
                print "Processing files in directory ", args.input
            for filename in os.listdir(args.input):
                add2sequences(filename)
        else: 
            add2sequences(args.input)

    if args.verbose:
        print "adding sequences to database"
    laad.addEntries(sequences)

if args.query:
    if args.verbose:
        print "Sending query:", args.query
    sequences = laad.command(args.query, args.user)

if args.output:
    for seq in sequences:
        print seq["seqID"]

if args.outfile:
    make_file(sequences, args.output)

if args.init:
    config.createDatabase()
if args.config:
    config.menu()
