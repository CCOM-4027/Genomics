#!/usr/bin/python
import os, sys, argparse
import parsingfasta as parse
#import bobby, juan
extensions = ['.fasta',',gbk','sam']

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input')
parser.add_argument('-o', '--output')
parser.add_argument('-q', '--query')
args = parser.parse_args()

def file2seqs(filename):
    print "converting file",filename, "to sequence object"
    return parse.file_to_entries(filename)

def make_file(sequences, filename):
    if parse.extension(filename) in extensions:
        print "file", filename, "created with the following sequences"
        for sequence in sequences:
            print "\t", sequence.id
    else:
        print "Error: specified invalid file extension for output"

def python2db(entries):
    print "adding the following entries to the database:"
    for entry in entries:
        print "\t", entry.location

def eval_query(query):
    print "Query sent:", query


sequences = []
if args.input:
    if not os.path.exists(args.input): 
        print "File or directory does not exist"
    else:
        def add2sequences(file):
            if parse.extension(file) in extensions:
                sequences.extend(file2seqs(file))

        if os.path.isdir(args.input):
            for filename in os.listdir(args.input):
                add2sequences(filename)
        else: 
            add2sequences(args.input)
    python2db(sequences)

if args.query:
    eval_query(args.query)

if args.output:
    make_file(sequences, args.output)




"""
if args.file:
    seqs = bobby.loadfasta(args.file)
    for sequence in seqs:
        juan.seqinput(sequence)

if args.outputfile:
    output = 
    for seq in seqs:
        eu

tables = [
    "Create TABLE sequences <schema>",
    "create table reads",
    "create Table assembler"
    "Create stuff"
    ]
create seqs with values (seqID, seqHash, file (seqHash, seqID) unique)
"""
