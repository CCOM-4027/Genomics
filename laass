#!/usr/bin/python
import os,sys, argparse
#import bobby, juan
extensions = ['.fasta',',gbk','sam']

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input')
parser.add_argument('-o', '--output')
parser.add_argument('-q', '--query')
args = parser.parse_args()

def extension(input):
    path, ext = os.path.splitext(input)
    return ext

def file_2_seq(filename):
    print "converting file",filename, "to sequence object"
    return filename

def make_file(filename):
    if extension(filename) in extensions:
        print "file", filename, "created!"
    else:
        print "Error: specified invalid file extension for output"

def python2db(entries):
    print "adding the following entries to the database:"
    for entry in entries:
        print "\t",entry

def eval_query(query):
    print "Query sent:", query

sequences = []
if args.input:
    #if input path exists
    if os.path.exists(args.input):
        #define a function to append files to the list of sequences
        def add_to_sequences(file):
            #only if it has a valid extension
            if extension(file) in extensions:
                sequences.append(file_2_seq(file))
        #then if the path is a directory
        if os.path.isdir(args.input):
            #then every file
            for filename in os.listdir(args.input):
                #is added to the sequence list
                add_to_sequences(filename)
        else: 
            #the sigle file is added
            add_to_sequences(args.input)
    else:
        print "Invalid path specified"
    python2db(sequences)

if args.query:
    eval_query(args.query)

if args.output:
    make_file(args.output)








"""
if args.file:
    seqs = bobby.loadfasta(args.file)
    for sequence in seqs:
        juan.seqinput(sequence)

if args.outputfile:
    output = 
    for seq in seqs:
        eu

tables = [
    "Create TABLE sequences <schema>",
    "create table reads",
    "create Table assembler"
    "Create stuff"
    ]
create seqs with values (seqID, seqHash, file (seqHash, seqID) unique)
"""
