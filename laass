#!/usr/bin/python
import os, sys, argparse
import laad
import config
from laad import do
import parsingfasta as fileIO

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input')
parser.add_argument('-o', '--output', action='store_true')
parser.add_argument('-of', '--outfile')
parser.add_argument('-q', '--query')
parser.add_argument('-u', '--user', default='laadguest')
parser.add_argument('-v', '--verbose', action='store_true')
parser.add_argument('--init', action='store_true')
parser.add_argument('--config', action='store_true')
parser.add_argument('-d','--description',default="")
args= parser.parse_args()


entries = []

if args.input:
    if not os.path.exists(args.input): 
        print "Error: File or directory does not exist"
    else:
        def add2entries(file):
            if fileIO.fileType(file):
                if args.verbose:
                    print "Converting file", file, "into entries"
                entries.extend(fileIO.file2entries(file,args.description))

        if os.path.isdir(args.input):
            if args.verbose:
                print "Processing files in directory ", args.input
            for file in os.listdir(args.input):
                add2entries(file)
        else: 
            add2entries(args.input)

    if args.verbose:
        print "Adding",len(entries), "entries to database"
    #laad.addEntries(sequences)

if args.query:
    if args.verbose:
        print "Sending query:", args.query
    entries = laad.command(args.query, args.user)
    if args.verbose:
        print "Query returned",len(entries), "results"

if args.output:
    for entry in entries:
        print entry['PI']

if args.outfile:
    if 'fasta' == fileIO.fileType(args.outfile):
        if args.verbose:
            files = len(set([entry['path'] for entry in entries]))
            print "Fetching",len(entries), "from", files, "source file(s)\n", 
        records = fileIO.entries2records(entries)
        if args.verbose:
            print "Writing",len(entries), "to file",args.outfile
        fileIO.records2file(records, args.outfile)
    else:
        print "Error: specified invalid file extension for output; file not created"

if args.init:
    config.createDatabase()

if args.config:
    config.menu()
